// src/pages/UniversityAcademicPlatform.jsx
import { useEffect, useMemo, useState } from "react";
import { Link, useNavigate } from "react-router-dom";

/* ============ Utils & Storage ============ */
function safeParse(json) { try { return JSON.parse(json || ""); } catch { return null; } }
const ID_KEYS = ["authUserId","activeUserId","currentUserId","loggedInUserId"];
function loadActiveUser() {
  for (const src of [sessionStorage, localStorage]) {
    for (const key of ID_KEYS) {
      const id = src.getItem(key);
      if (id) {
        const byId = safeParse(localStorage.getItem("usersById")) || {};
        if (byId[id]) return byId[id];
        const arr = safeParse(localStorage.getItem("users")) || [];
        const found = arr.find(u => u.id === id || u.uid === id || u.userId === id);
        if (found) return found;
      }
    }
  }
  return safeParse(sessionStorage.getItem("currentUser")) || safeParse(localStorage.getItem("currentUser"));
}
const timeAgo = (ts) => {
  const s = Math.floor((Date.now() - ts)/1000);
  if (s<60) return `${s}s`;
  const m = Math.floor(s/60); if (m<60) return `${m}m`;
  const h = Math.floor(m/60); if (h<24) return `${h}h`;
  const d = Math.floor(h/24); return `${d}d`;
};
const uid = () => `id_${Date.now()}_${Math.random().toString(36).slice(2)}`;

/* Presence (very lightweight) */
const PRESENCE_KEY = "presence__byUserId";
function touchPresence(userId) {
  if (!userId) return;
  const m = safeParse(localStorage.getItem(PRESENCE_KEY)) || {};
  m[userId] = Date.now();
  localStorage.setItem(PRESENCE_KEY, JSON.stringify(m));
}
function isOnline(userId) {
  if (!userId) return false;
  const m = safeParse(localStorage.getItem(PRESENCE_KEY)) || {};
  return (Date.now() - (m[userId] || 0)) < 5 * 60 * 1000;
}

/* ============ UI bits ============ */
function Card({ className="", children, square=false }) {
  return <div className={`${square ? "rounded-none" : "rounded-2xl"} border border-slate-200 bg-white shadow-sm ${className}`}>{children}</div>;
}
function HeaderBar({ title, square=false }) {
  return (
    <div className={`${square ? "rounded-none" : "rounded-t-2xl"} px-4 py-2.5 bg-[#7bdad1]/90 text-slate-900 text-sm font-semibold text-center`}>
      {title}
    </div>
  );
}
function Avatar({ url, name, size="md", online=false }) {
  const sz = size==="lg"?"h-12 w-12":size==="sm"?"h-7 w-7":"h-9 w-9";
  const initials = (name||"User").split(/\s+/).slice(0,2).map(p=>p[0]?.toUpperCase()).join("") || "U";
  return (
    <div className={`relative ${sz} rounded-full bg-slate-300 overflow-hidden flex items-center justify-center shrink-0`}>
      {url ? <img src={url} alt={name} className="h-full w-full object-cover"/> :
        <span className="text-white text-xs bg-gradient-to-tr from-blue-500 to-indigo-500 h-full w-full flex items-center justify-center">{initials}</span>}
      <span className={`absolute bottom-0 right-0 h-2.5 w-2.5 rounded-full ring-2 ring-white ${online ? "bg-green-500" : "bg-slate-300"}`} />
    </div>
  );
}
function ReadMore({ text, lines=3 }) {
  const [open, setOpen] = useState(false);
  if (!text) return null;
  return (
    <div className="text-sm text-slate-800">
      <p className={`${open ? "" : `line-clamp-${lines}`} whitespace-pre-wrap`}>{text}</p>
      <button type="button" onClick={()=>setOpen(o=>!o)} className="text-blue-600 text-xs mt-1 underline">
        {open ? "Read less" : "Read more"}
      </button>
    </div>
  );
}

/* ============ Attachments ============ */
function readFiles(files) {
  const arr = Array.from(files || []);
  return Promise.all(arr.map(async (f) => {
    const dataUrl = await new Promise((res, rej) => {
      const r = new FileReader();
      r.onload = () => res(r.result);
      r.onerror = rej;
      r.readAsDataURL(f);
    });
    return { id: uid(), name: f.name, type: f.type, size: f.size, dataUrl };
  }));
}
function AttachmentStrip({ atts=[] }) {
  if (!atts.length) return null;
  const images = atts.filter(a => (a.type||"").startsWith("image/"));
  const files  = atts.filter(a => !(a.type||"").startsWith("image/"));
  return (
    <div className="mt-2 space-y-2">
      {images.length>0 && (
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
          {images.map(img => (
            <img key={img.id} src={img.dataUrl} alt={img.name} className="w-full h-40 object-cover rounded"/>
          ))}
        </div>
      )}
      {files.length>0 && (
        <ul className="text-sm list-disc pl-5">
          {files.map(f => (
            <li key={f.id} className="break-all">
              <a href={f.dataUrl} download={f.name} className="text-blue-600 underline">{f.name}</a>
              <span className="text-slate-400 text-xs"> ({Math.round((f.size||0)/1024)} KB)</span>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

/* ============ Categories & Topics ============ */
const TOPIC_MAP = {
  "Law": ["Admiralty (Maritime) Law","Business law","Child Protection Laws","Construction Law","Corporate Law","Criminal Law","Cybersecurity Law","Environmental Law","Health Law","Human Rights Law","Intellectual Property Law","International Law","Marriage Law","Tax Law"],
  "Engineering": ["Aeronautical Engineering","Agricultural Engineering","Architectural Engineering","Architecture","Aviation Engineering","Biomedical Engineering","Chemical Engineering","Civil Engineering","Computer and IT Engineering","Electrical Engineering","Electronic Engineering","Environmental Engineering","General Engineering","Geological Engineering","Industrial Engineering","Manufacturing Engineering","Marine Engineering","Mechanical Engineering","Metallurgical Engineering","Mining Engineering","Textiles Engineering"],
  "Natural sciences": ["Biochemistry","Biology","Chemistry","Mathematics / Statistics","Microbiology","Physics","Botany","Zoology"],
  "Sports": ["Physical Education","Sport Science","English Premier League","Spanish La Liga","German Bundesliga","Italian Serie A","French Ligue 1","Cricket","Field hockey","Tennis","Volleyball","Table tennis","Baseball","Golf","Basketball","American football","Athletics sports","NBA"],
  "Business Studies": ["Accounting","Finance","Marketing","Management","Human Resources","Business Analytics","Entrepreneurship","Supply Chain Management","Information Systems","Project Management","Tourism / Hospitality","Crypto Currency","Banking","Insurance","Mortgages","Credit Cards","Tax Studies","Personal loans","Autoloans"],
  "Social Sciences": ["Anthropology","Archaeology","Criminology","Geography","History","International relations","Political Science","Psychology","Public Administration","Social Policy","Social work","Sociology"],
  "Agriculture": ["Agribusiness and Agricultural Economics","Agricultural engineering","Agriculture","Agronomy","Animal Science","Aquaculture Science","Crop Science","Environmental Sciences and Management","Food science & Technology","Forestry","Horticulture","Human Nutrition","Irrigation and Water Resources Engineering","Marine Science","Natural resource management.","Textiles and Fibre Science","Veterinary Science & Medicine"],
  "Economics": ["Behavioral Economics","Crypto Currency","Development Economics","Economic Sanctions","Financial Economics","Health Economics","Internal Trade","International Economics","Labor Economics","Macroeconomics","Microeconomics","Public Economics","Real Estate","Stock Markets","Treasure Bonds","Digital Economy","Inequality and Poverty"],
  "Arts & Humanities": ["Applied Arts","Classics","Design","Education","Fine Arts","History","Literature","Museum Studies","Performing Arts","Philosophy","Religion and Theology","Visual Arts"],
  "Current & Trending Topics": ["Artificial Intelligence (AI)","Climate Change","Divorce","Economic Inequality:","Gender Equality","Girl-Boy friends Relationship","Healthcare Access","Marriage Relationship","Mental Health","Pre-Marital Sexual relationship","Privacy","Racial and Ethnic Inequality","Social Media Fatigue","Trending fashions & Styles","University Life","University Students Relationship"],
  "Medicine & Health": ["Anaesthesia","Anatomy","Biomedical Science","Dentistry","Dermatology","Medicine / Surgery","Natural / Alternative Medicine","Nursing","Obstetrics / Gynaecology","Optometry / Ophthalmology","Orthopaedics","Otorhinolaryngology","Pathology","Pediatrics","Podiatry","Psychiatry","Radiography","Speech / Rehabilitation / Physio"]
};
const CATEGORIES = ["All", ...Object.keys(TOPIC_MAP)];

/* ============ Page ============ */
export default function UniversityAcademicPlatform() {
  const navigate = useNavigate();
  const [user] = useState(() => loadActiveUser());
  const uni = user?.university || "";
  const STORE_KEY = `quora_uni_posts__${uni}`;
  const FOL_KEY = `quora_uni_follows__${user?.id || "anon"}__${uni}`;

  useEffect(() => {
    if (!user) navigate("/login?role=student", { replace: true });
    touchPresence(user?.id);
    const interval = setInterval(()=>touchPresence(user?.id), 60_000);
    return () => clearInterval(interval);
  }, [user, navigate]);

  /* Seed & load */
  const seeded = useMemo(() => {
    const now = Date.now();
    return [
      {
        id: uid(),
        title: "Welcome! Ask or share thoughts about your courses here.",
        body: "Click the prompt above to open the editor. Attach images/files when helpful. Be respectful and cite sources.",
        category: "Arts & Humanities",
        topic: "Education",
        views: 12,
        likes: 2,
        saved: false,
        author: { id: user?.id, name: user?.name || "Student", program: user?.program || "Program", photoUrl: user?.photoUrl || "" },
        university: uni,
        createdAt: now - 3600_000,
        attachments: [],
        comments: []
      }
    ];
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [uni]);

  const [posts, setPosts] = useState(() => {
    const ls = safeParse(localStorage.getItem(STORE_KEY));
    return Array.isArray(ls) ? ls : seeded;
  });
  const [follows, setFollows] = useState(() => safeParse(localStorage.getItem(FOL_KEY)) || {});
  useEffect(() => { localStorage.setItem(STORE_KEY, JSON.stringify(posts)); }, [posts, STORE_KEY]);
  useEffect(() => { localStorage.setItem(FOL_KEY, JSON.stringify(follows)); }, [follows, FOL_KEY]);

  /* State */
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [selectedTopic, setSelectedTopic] = useState("All"); // show all initially
  const [q, setQ] = useState("");
  const [sort, setSort] = useState("Top"); // Top | Newest | Answered
  const [myOnly, setMyOnly] = useState(false);

  /* Composer — collapsed until clicked */
  const [editorOpen, setEditorOpen] = useState(false);
  const [askTitle, setAskTitle] = useState("");
  const [askBody, setAskBody] = useState("");
  const [askAtts, setAskAtts] = useState([]);
  const onPickAskFiles = async (e) => {
    const chosen = await readFiles(e.target.files);
    setAskAtts(prev => [...prev, ...chosen]);
    e.target.value = "";
  };
  const postQuestion = (e) => {
    e.preventDefault();
    if (!askTitle.trim() && !askBody.trim() && askAtts.length===0) return;
    const p = {
      id: uid(),
      title: askTitle.trim() || "(No title)",
      body: askBody.trim(),
      category: selectedCategory==="All" ? "Current & Trending Topics" : selectedCategory,
      topic: selectedTopic==="All" ? "General" : selectedTopic,
      views: 0,
      likes: 0,
      saved: false,
      author: { id: user?.id, name: user?.name || "Student", program: user?.program || "Program", photoUrl: user?.photoUrl || "" },
      university: uni,
      createdAt: Date.now(),
      attachments: askAtts,
      comments: []
    };
    setPosts(prev => [p, ...prev]);
    setAskTitle(""); setAskBody(""); setAskAtts([]); setEditorOpen(false);
  };

  /* Interactions */
  const toggleLike = (id) => setPosts(prev => prev.map(p => p.id===id ? ({...p, likes: (p._liked? p.likes-1 : p.likes+1), _liked: !p._liked}) : p));
  const toggleSave = (id) => setPosts(prev => prev.map(p => p.id===id ? ({...p, saved: !p.saved}) : p));

  const addAnswer = async (postId, text, atts=[]) => {
    if (!text.trim() && atts.length===0) return;
    setPosts(prev => prev.map(p => {
      if (p.id !== postId) return p;
      const ans = {
        id: uid(),
        parentId: null,
        text: text.trim(),
        authorId: user?.id,
        author: user?.name,
        authorProgram: user?.program,
        authorPhoto: user?.photoUrl,
        createdAt: Date.now(),
        attachments: atts
      };
      return { ...p, comments: [...(p.comments||[]), ans] };
    }));
  };
  const addReply = async (postId, parentId, text, atts=[]) => {
    if (!text.trim() && atts.length===0) return;
    setPosts(prev => prev.map(p => {
      if (p.id !== postId) return p;
      const r = {
        id: uid(),
        parentId,
        text: text.trim(),
        authorId: user?.id,
        author: user?.name,
        authorProgram: user?.program,
        authorPhoto: user?.photoUrl,
        createdAt: Date.now(),
        attachments: atts
      };
      return { ...p, comments: [...(p.comments||[]), r] };
    }));
  };

  const followKey = (cat, topic) => `${cat}::${topic}`;
  const isFollowed = (cat, topic) => !!follows[followKey(cat,topic)];
  const toggleFollow = (cat, topic) => setFollows(prev => ({ ...prev, [followKey(cat, topic)]: !prev[followKey(cat, topic)] }));

  /* Derived lists */
  const topicList =
    selectedCategory === "All"
      ? ["All"]
      : ["All", ...(TOPIC_MAP[selectedCategory] || [])];

  const visible = posts
    .filter(p => p.university === uni)
    .filter(p => myOnly ? p.author.id === user?.id : true)
    .filter(p => (selectedCategory==="All" ? true : p.category === selectedCategory))
    .filter(p => (selectedTopic==="All" ? true : p.topic === selectedTopic))
    .filter(p => q ? (p.title.toLowerCase().includes(q.toLowerCase()) || p.body.toLowerCase().includes(q.toLowerCase())) : true);

  const withCounts = visible.map(p => {
    const answers = (p.comments||[]).filter(c => !c.parentId).length;
    return { ...p, _answers: answers };
  });

  let sorted = [...withCounts];
  if (sort === "Top") sorted.sort((a,b) => (b.likes||0) - (a.likes||0));
  if (sort === "Newest") sorted.sort((a,b) => (b.createdAt||0) - (a.createdAt||0));
  if (sort === "Answered") sorted.sort((a,b) => (b._answers - a._answers) || ((b.createdAt||0)-(a.createdAt||0)));

  /* Answer + Reply UI (with attachments + collapse) */
  function ReplyBox({ onSubmit }) {
    const [t, setT] = useState("");
    const [atts, setAtts] = useState([]);
    const onPick = async (e) => {
      const chosen = await readFiles(e.target.files);
      setAtts(prev => [...prev, ...chosen]);
      e.target.value = "";
    };
    return (
      <form onSubmit={(e)=>{ e.preventDefault(); onSubmit(t, atts); setT(""); setAtts([]); }} className="mt-2 pl-4">
        <AttachmentStrip atts={atts} />
        <div className="flex items-start gap-2 mt-2">
          <input
            value={t}
            onChange={e=>setT(e.target.value)}
            placeholder="Reply…"
            className="flex-1 border border-slate-200 rounded-full px-3 py-1.5"
          />
          <label className="text-xs border border-slate-200 rounded-full px-2 py-1 cursor-pointer hover:bg-slate-50">
            📎 Attach
            <input type="file" className="hidden" multiple onChange={onPick}/>
          </label>
          <button className="rounded-full border border-slate-200 px-3 py-1.5 hover:bg-slate-50">Reply</button>
        </div>
      </form>
    );
  }

  function AnswerThread({ post }) {
    const [open, setOpen] = useState(true);
    const [t, setT] = useState("");
    const [atts, setAtts] = useState([]);

    const answers = (post.comments||[]).filter(c => !c.parentId);
    const byParent = (post.comments||[]).reduce((acc,c)=>{ if(c.parentId){ (acc[c.parentId] ||= []).push(c);} return acc; }, {});

    const onPick = async (e) => {
      const chosen = await readFiles(e.target.files);
      setAtts(prev => [...prev, ...chosen]);
      e.target.value = "";
    };

    return (
      <div className="mt-3">
        <button onClick={()=>setOpen(o=>!o)} className="text-sm text-blue-700 underline">
          Answers ({answers.length}) {open ? "▾" : "▸"}
        </button>
        {open && (
          <div className="mt-2">
            {answers.map(a => (
              <div key={a.id} className="mt-3">
                <div className="flex items-start gap-2">
                  <Avatar url={a.authorPhoto} name={a.author} size="sm" online={isOnline(a.authorId)} />
                  <div className="bg-slate-50 rounded-2xl px-3 py-2 w-full">
                    <div className="text-sm font-medium text-slate-900">{a.author}</div>
                    <div className="text-[11px] text-slate-500">{a.authorProgram || ""} • {timeAgo(a.createdAt)} ago</div>
                    <ReadMore text={a.text} lines={3} />
                    <AttachmentStrip atts={a.attachments} />

                    {(byParent[a.id]||[]).map(r => (
                      <div key={r.id} className="mt-3 pl-4 border-l border-slate-200">
                        <div className="flex items-start gap-2">
                          <Avatar url={r.authorPhoto} name={r.author} size="sm" online={isOnline(r.authorId)} />
                          <div className="bg-white rounded-2xl px-3 py-2 border border-slate-100 w-full">
                            <div className="text-sm font-medium text-slate-900">{r.author}</div>
                            <div className="text-[11px] text-slate-500">{r.authorProgram || ""} • {timeAgo(r.createdAt)} ago</div>
                            <ReadMore text={r.text} lines={3} />
                            <AttachmentStrip atts={r.attachments} />
                          </div>
                        </div>
                      </div>
                    ))}

                    <ReplyBox onSubmit={(v, ra)=>addReply(post.id, a.id, v, ra)} />
                  </div>
                </div>
              </div>
            ))}

            {/* add new answer */}
            <form onSubmit={(e)=>{ e.preventDefault(); addAnswer(post.id, t, atts); setT(""); setAtts([]); }} className="mt-3">
              <AttachmentStrip atts={atts} />
              <div className="flex items-start gap-2 mt-2">
                <input
                  value={t}
                  onChange={e=>setT(e.target.value)}
                  placeholder="Write your answer…"
                  className="flex-1 border border-slate-200 rounded-full px-3 py-1.5"
                />
                <label className="text-xs border border-slate-200 rounded-full px-2 py-1 cursor-pointer hover:bg-slate-50">
                  📎 Attach
                  <input type="file" className="hidden" multiple onChange={onPick}/>
                </label>
                <button className="rounded-full border border-slate-200 px-3 py-1.5 hover:bg-slate-50">Answer</button>
              </div>
            </form>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#f3f6fb]">
      <main className="max-w-[1300px] mx-auto px-3 lg:px-5 py-6 grid grid-cols-1 lg:grid-cols-[260px_minmax(780px,1fr)_260px] gap-5">
        {/* LEFT rail: Platform -> My Posts -> Topics (square corners) */}
        <aside className="space-y-4">
          <Card square>
            <HeaderBar title="University Academic Platform" square />
            <div className="p-4">
              <p className="text-xs text-slate-700 text-center">Only for {uni || "your university"}.</p>
            </div>
          </Card>

          {/* ✅ My Posts directly under Platform */}
          <Card square>
            <HeaderBar title="My Posts" square />
            <div className="p-3">
              <button
                onClick={()=>setMyOnly(v=>!v)}
                className={`w-full rounded px-3 py-1.5 text-sm ${myOnly ? "bg-blue-600 text-white" : "border border-slate-200 hover:bg-slate-50"}`}
              >
                {myOnly ? "On" : "Off"}
              </button>
            </div>
          </Card>

          {/* ✅ Topics restored to earlier format + “All” */}
          <Card square>
            <HeaderBar title="Topics" square />
            <div className="p-3 space-y-2">
              <select
                value={selectedCategory}
                onChange={(e)=>{ const c=e.target.value; setSelectedCategory(c); setSelectedTopic("All"); }}
                className="w-full border border-slate-200 rounded px-3 py-2 text-sm"
              >
                {CATEGORIES.map(c => <option key={c} value={c}>{c}</option>)}
              </select>

              {/* Scrollable list like before, with Follow buttons; if “All”, just show the All pill */}
              <div className="max-h-[48vh] overflow-auto pr-1">
                {(selectedCategory === "All" ? ["All"] : TOPIC_MAP[selectedCategory]).map(t => {
                  const topicVal = selectedCategory === "All" ? "All" : t;
                  const active = topicVal === selectedTopic;
                  const canFollow = selectedCategory !== "All" && topicVal !== "All";
                  const f = canFollow ? isFollowed(selectedCategory, topicVal) : false;

                  return (
                    <div key={topicVal} className={`flex items-center gap-2 rounded px-2 py-1 ${active ? "bg-slate-100" : "hover:bg-slate-50"}`}>
                      <button
                        className="text-left text-sm flex-1 truncate"
                        onClick={()=>setSelectedTopic(topicVal)}
                        title={topicVal}
                      >
                        {topicVal}
                      </button>
                      {canFollow && (
                        <button
                          onClick={()=>toggleFollow(selectedCategory, topicVal)}
                          className={`text-xs rounded-full px-2 py-0.5 border ${f?"border-blue-600 text-blue-600":"border-slate-300 text-slate-600"} hover:bg-slate-50`}
                        >
                          {f ? "Following" : "Follow"}
                        </button>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          </Card>
        </aside>

        {/* CENTER: Composer + Filters + Feed */}
        <section className="space-y-4">
          {/* ✅ Collapsed composer (opens on click like Quora) */}
          <Card>
            <div className="p-4">
              {!editorOpen ? (
                <div className="flex items-center gap-3">
                  <Avatar url={user?.photoUrl} name={user?.name} size="md" online={true} />
                  <button
                    onClick={()=>setEditorOpen(true)}
                    className="flex-1 text-left border border-slate-200 rounded-full px-4 py-3 bg-white hover:bg-slate-50 text-slate-600"
                  >
                    What do you want to ask or share?
                  </button>
                </div>
              ) : (
                <form onSubmit={postQuestion}>
                  <div className="flex items-start gap-3">
                    <Avatar url={user?.photoUrl} name={user?.name} size="md" online={true} />
                    <div className="flex-1 min-w-0">
                      <input
                        value={askTitle}
                        onChange={e=>setAskTitle(e.target.value)}
                        placeholder="What do you want to ask?"
                        className="w-full border border-slate-200 rounded px-3 py-2 text-sm"
                      />
                      <textarea
                        value={askBody}
                        onChange={e=>setAskBody(e.target.value)}
                        rows={3}
                        placeholder="Add more details..."
                        className="mt-2 w-full border border-slate-200 rounded px-3 py-2 text-sm"
                      />
                      <AttachmentStrip atts={askAtts} />
                      <div className="mt-2 flex items-center gap-2">
                        <label className="text-xs border border-slate-200 rounded-full px-3 py-1.5 cursor-pointer hover:bg-slate-50">
                          📎 Attach images/files
                          <input type="file" className="hidden" multiple onChange={onPickAskFiles}/>
                        </label>
                        <div className="ml-auto flex items-center gap-2">
                          <select
                            value={selectedCategory}
                            onChange={(e)=>{ const c=e.target.value; setSelectedCategory(c); setSelectedTopic("All"); }}
                            className="border border-slate-200 rounded px-2 py-1 text-xs"
                          >
                            {CATEGORIES.map(c => <option key={c} value={c}>{c}</option>)}
                          </select>
                          <select
                            value={selectedTopic}
                            onChange={(e)=>setSelectedTopic(e.target.value)}
                            className="border border-slate-200 rounded px-2 py-1 text-xs"
                          >
                            {topicList.map(t => <option key={t} value={t}>{t}</option>)}
                          </select>
                          <button className="rounded-full bg-blue-600 text-white px-4 py-1.5 text-sm font-semibold hover:bg-blue-700">
                            Post
                          </button>
                          <button
                            type="button"
                            onClick={()=>{ setEditorOpen(false); setAskTitle(""); setAskBody(""); setAskAtts([]); }}
                            className="rounded-full border border-slate-200 px-3 py-1.5 text-sm hover:bg-slate-50"
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </form>
              )}
            </div>
          </Card>

          {/* Sort + Search under composer */}
          <Card>
            <div className="p-3 flex flex-wrap items-center gap-2">
              <div className="text-sm">Showing:</div>
              <div className="flex items-center gap-1">
                {["Top","Newest","Answered"].map(s => (
                  <button
                    key={s}
                    onClick={()=>setSort(s)}
                    className={`text-xs rounded-full px-3 py-1 border ${sort===s ? "bg-blue-600 text-white border-blue-600":"border-slate-200 hover:bg-slate-50"}`}
                  >
                    {s}
                  </button>
                ))}
              </div>
              <div className="ml-auto">
                <input
                  value={q}
                  onChange={e=>setQ(e.target.value)}
                  placeholder="Search posts…"
                  className="w-72 max-w-[60vw] border border-slate-200 rounded px-3 py-1.5 text-sm"
                />
              </div>
            </div>
          </Card>

          {sorted.map(post => (
            <Card key={post.id} className="p-0">
              <div className="p-4">
                <div className="flex items-start gap-3">
                  <Avatar url={post.author.photoUrl} name={post.author.name} online={isOnline(post.author.id)} />
                  <div className="min-w-0">
                    <div className="text-sm text-slate-500">
                      <span className="font-semibold text-slate-900">{post.author.name}</span> • {post.author.program || "Program"} • {timeAgo(post.createdAt)} ago
                    </div>
                    <div className="text-xs text-slate-500">{post.category} • {post.topic}</div>
                  </div>
                </div>

                <div className="mt-2">
                  <div className="text-lg font-semibold text-slate-900">{post.title}</div>
                  {post.body && <ReadMore text={post.body} lines={3} />}
                  <AttachmentStrip atts={post.attachments} />
                </div>

                <div className="mt-3 flex items-center gap-4 text-sm text-slate-600">
                  <button onClick={()=>toggleLike(post.id)} className="rounded px-2 py-1 hover:bg-slate-50">
                    👍 Upvote {post.likes>0 && <span className="text-slate-500">({post.likes})</span>}
                  </button>
                  <span className="text-slate-400">•</span>
                  <span className="text-slate-700">{(post.comments||[]).filter(c=>!c.parentId).length} Answers</span>
                  <span className="text-slate-400">•</span>
                  <span className="text-slate-700">{post.views || 0} Views</span>
                  <button onClick={()=>toggleSave(post.id)} className="ml-auto rounded px-2 py-1 hover:bg-slate-50">
                    {post.saved ? "★ Saved" : "☆ Save"}
                  </button>
                </div>

                <AnswerThread post={post}/>
              </div>
            </Card>
          ))}
        </section>

        {/* RIGHT rail: Your Topics + Rules (same width as left, square corners) */}
        <aside className="space-y-4">
          <Card square>
            <HeaderBar title="Your Topics" square />
            <div className="p-3 space-y-1 text-sm max-h-[180px] overflow-auto">
              {Object.entries(follows).filter(([_,v])=>v).map(([k])=>{
                const [cat,topic] = k.split("::");
                return (
                  <button
                    key={k}
                    onClick={()=>{ setSelectedCategory(cat); setSelectedTopic(topic); }}
                    className="w-full text-left rounded px-2 py-1 hover:bg-slate-50"
                    title={`${cat} • ${topic}`}
                  >
                    {topic} <span className="text-slate-400">• {cat}</span>
                  </button>
                );
              })}
              {Object.values(follows).filter(Boolean).length===0 && (
                <div className="text-slate-500">Follow topics from the left panel.</div>
              )}
            </div>
          </Card>

          <Card square>
            <HeaderBar title="Community rules" square />
            <div className="p-4 text-sm text-slate-700">
              Be respectful. No harassment, plagiarism, or sharing of exam content. Cite sources when possible.
            </div>
          </Card>
        </aside>
      </main>
    </div>
  );
}