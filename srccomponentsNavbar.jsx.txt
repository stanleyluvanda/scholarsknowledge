// src/components/Navbar.jsx
import React, { useEffect, useRef, useState } from "react";
import { Link, useNavigate } from "react-router-dom";

/* ---------- Small helpers ---------- */
function safeParse(json) { try { return JSON.parse(json || ""); } catch { return null; } }
const ID_KEYS = ["authUserId","activeUserId","currentUserId","loggedInUserId"];

function loadActiveUser() {
  for (const src of [sessionStorage, localStorage]) {
    for (const k of ID_KEYS) {
      const id = src.getItem(k);
      if (id) {
        const byId = safeParse(localStorage.getItem("usersById")) || {};
        if (byId[id]) return byId[id];
        const list = safeParse(localStorage.getItem("users")) || [];
        const found = list.find(u => u.id === id || u.uid === id || u.userId === id);
        if (found) return found;
      }
    }
  }
  return safeParse(sessionStorage.getItem("currentUser")) ||
         safeParse(localStorage.getItem("currentUser")) || null;
}

function initials(name = "") {
  const parts = name.trim().split(/\s+/).filter(Boolean);
  const a = (parts[0]?.[0] || "U").toUpperCase();
  const b = (parts[1]?.[0] || "S").toUpperCase();
  return a + b;
}

function clearAuthStateKeepData() {
  sessionStorage.clear();
  localStorage.removeItem("currentUser");
  for (const k of ID_KEYS) {
    sessionStorage.removeItem(k);
    localStorage.removeItem(k);
  }
}

/* ---------- Avatar ---------- */
function Avatar({ url, name }) {
  return (
    <div className="h-10 w-10 rounded-full bg-slate-300 overflow-hidden flex items-center justify-center shrink-0">
      {url ? (
        <img src={url} alt={name} className="h-full w-full object-cover" />
      ) : (
        <span className="text-xs font-semibold text-white bg-gradient-to-tr from-indigo-500 to-purple-500 h-full w-full flex items-center justify-center">
          {initials(name)}
        </span>
      )}
    </div>
  );
}

/* ---------- Spinning globe (from /public/globe.*) ---------- */
function SpinningGlobe({ size = 40 }) {
  const candidates = ["/globe.jpg", "/globe.png", "/globe.svg"];
  const [idx, setIdx] = useState(0);
  const [hidden, setHidden] = useState(false);
  const src = candidates[idx];
  const onErr = () => { if (idx < candidates.length - 1) setIdx(i => i + 1); else setHidden(true); };
  if (hidden) return null;

  return (
    <div className="rounded-full overflow-hidden shrink-0" style={{ width: size, height: size }} title="ScholarsKnowledge">
      <img
        src={src}
        onError={onErr}
        alt="Globe"
        className="h-full w-full object-cover animate-spin"
        style={{ animationDuration: "6s" }}
      />
    </div>
  );
}

/* ================= Navbar ================= */
export default function Navbar() {
  const navigate = useNavigate();
  const [user, setUser] = useState(() => loadActiveUser());
  const [open, setOpen] = useState(false);
  const menuRef = useRef(null);

  useEffect(() => {
    const onStorage = () => setUser(loadActiveUser());
    window.addEventListener("storage", onStorage);
    return () => window.removeEventListener("storage", onStorage);
  }, []);

  useEffect(() => {
    const onDown = (e) => {
      if (e.key === "Escape") setOpen(false);
      if (!menuRef.current) return;
      if (open && !menuRef.current.contains(e.target)) setOpen(false);
    };
    document.addEventListener("mousedown", onDown);
    document.addEventListener("keydown", onDown);
    return () => {
      document.removeEventListener("mousedown", onDown);
      document.removeEventListener("keydown", onDown);
    };
  }, [open]);

  const dashboardPath =
    (user?.role || "").toLowerCase() === "lecturer"
      ? "/lecturer-dashboard"
      : "/student-dashboard";

  const handleLogout = () => {
    const roleParam =
      (user?.role || "student").toLowerCase() === "lecturer" ? "lecturer" : "student";
    clearAuthStateKeepData();
    setUser(null);
    setOpen(false);
    navigate(`/login?role=${roleParam}`);
  };

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur border-b border-slate-100 text-slate-800">
      <div className="w-full h-14 flex items-center gap-3 px-2 sm:px-3">
        {/* LEFT: Logo + Brand (flush left) */}
        <div className="flex items-center gap-2 min-w-0 shrink-0">
          <img
            src="/1754280544595.jpeg" /* your logo in /public */
            alt="ScholarsKnowledge logo"
            className="h-10 w-10 rounded-full object-cover"
          />
          <Link to="/" className="text-slate-900 font-semibold text-base md:text-lg truncate">
            ScholarsKnowledge
          </Link>
        </div>

        {/* CENTER: Main links â€” allow wrapping so they don't "disappear" on tight space */}
        <ul className="flex items-center gap-3 md:gap-4 ml-2 flex-wrap">
          <li><Link className="text-sm hover:text-slate-900 text-slate-700" to="/">Home</Link></li>
          <li><Link className="text-sm hover:text-slate-900 text-slate-700" to="/about">About</Link></li>
          <li><Link className="text-sm hover:text-slate-900 text-slate-700" to="/eduinfo">EduInfo</Link></li>
          <li><Link className="text-sm hover:text-slate-900 text-slate-700" to="/scholarship">Scholarship</Link></li>
          <li><Link className="text-sm hover:text-slate-900 text-slate-700" to="/student-sign-up">Student Sign Up</Link></li>
          <li><Link className="text-sm hover:text-slate-900 text-slate-700" to="/lecturer-sign-up">Lecturer Sign Up</Link></li>
        </ul>

        {/* RIGHT: globe + profile/login (hug far right) */}
        <div className="ml-auto flex items-center gap-3 pr-2 sm:pr-3 shrink-0">
          <SpinningGlobe size={40} />

          {!user ? (
            <Link
              to="/login"
              className="rounded-full bg-blue-600 text-white px-4 py-1.5 text-sm font-semibold hover:bg-blue-700"
            >
              Log in
            </Link>
          ) : (
            <div className="relative" ref={menuRef}>
              <button
                onClick={() => setOpen((v) => !v)}
                className="flex items-center gap-2 rounded-full hover:bg-slate-100 pl-2 pr-1 py-1"
                aria-haspopup="menu"
                aria-expanded={open}
              >
                <span className="hidden md:block text-sm text-slate-800 font-medium">Me â–¾</span>
                <Avatar url={user.photoUrl} name={user.name || "User"} />
              </button>

              {open && (
                <div
                  role="menu"
                  className="absolute right-0 mt-2 w-60 rounded-xl border border-slate-100 bg-white shadow-lg overflow-hidden"
                >
                  <div className="p-3 flex items-center gap-3">
                    <Avatar url={user.photoUrl} name={user.name || "User"} />
                    <div className="min-w-0">
                      <div className="font-semibold text-slate-900 truncate">
                        {user.name || "User"}
                      </div>
                      {user.role && (
                        <div className="text-xs text-slate-500 capitalize truncate">
                          {String(user.role).toLowerCase()}
                        </div>
                      )}
                    </div>
                  </div>
                  <hr className="border-slate-100" />
                  <button
                    role="menuitem"
                    onClick={() => { setOpen(false); navigate(dashboardPath); }}
                    className="w-full text-left px-3 py-2 text-sm hover:bg-slate-50 flex items-center gap-2"
                  >
                    <span>ðŸ‘¤</span> <span>View My Profile</span>
                  </button>
                  <button
                    role="menuitem"
                    onClick={handleLogout}
                    className="w-full text-left px-3 py-2 text-sm hover:bg-slate-50 flex items-center gap-2"
                  >
                    <span>ðŸšª</span> <span>Log Out</span>
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </nav>
  );
}