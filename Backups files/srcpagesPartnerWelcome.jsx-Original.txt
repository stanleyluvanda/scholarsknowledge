// src/pages/PartnerWelcome.jsx
import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import Footer from "../components/Footer";

function getPartner() {
  try {
    return JSON.parse(localStorage.getItem("partnerAuth") || "null");
  } catch {
    return null;
  }
}
function setPartner(p) {
  localStorage.setItem("partnerAuth", JSON.stringify(p));
  // let other tabs/pages know
  window.dispatchEvent(new Event("storage"));
}

export default function PartnerWelcome() {
  const nav = useNavigate();
  const [user, setUser] = useState(() => getPartner());
  const [editOpen, setEditOpen] = useState(false);
  const [msg, setMsg] = useState("");

  const [form, setForm] = useState(() => ({
    orgName: user?.orgName || "",
    contactName: user?.contactName || "",
    email: user?.email || "",
    phone: user?.phone || "",
    website: user?.website || "",
  }));

  // Password fields inside the same "Update Account Information" modal
  const [currentPw, setCurrentPw] = useState("");
  const [newPw, setNewPw] = useState("");
  const [confirmPw, setConfirmPw] = useState("");
  const [pwErr, setPwErr] = useState("");

  const onChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };

  const saveUpdates = (e) => {
    e.preventDefault();
    setPwErr("");

    // Handle password change if NEW password fields were used
    const wantsPwChange = newPw.length > 0 || confirmPw.length > 0 || currentPw.length > 0;

    if (wantsPwChange) {
      // If a password already exists, current must match
      if (user?.password) {
        if (!currentPw) {
          setPwErr("Please enter your current password.");
          return;
        }
        if (currentPw !== user.password) {
          setPwErr("Current password is incorrect.");
          return;
        }
      }
      // Basic new password validations
      if (!newPw || newPw.length < 6) {
        setPwErr("New password must be at least 6 characters.");
        return;
      }
      if (newPw !== confirmPw) {
        setPwErr("New passwords do not match.");
        return;
      }
    }

    const updated = { ...(user || {}), ...form };
    if (wantsPwChange) {
      updated.password = newPw; // set or overwrite password
    }

    setPartner(updated);
    setUser(updated);
    setEditOpen(false);

    // clean password fields after save
    setCurrentPw("");
    setNewPw("");
    setConfirmPw("");

    setMsg("Account information updated.");
    setTimeout(() => setMsg(""), 3000);
  };

  const logout = () => {
    localStorage.removeItem("partnerAuth");
    nav("/partner/login", { replace: true });
  };

  if (!user) {
    return (
      <div className="min-h-[calc(100vh-0px)] bg-gradient-to-br from-[#f0f6ff] via-white to-[#eef2ff]">
        <div className="max-w-5xl mx-auto px-4 lg:px-8 py-10">
          <h1 className="text-3xl font-extrabold tracking-tight text-slate-900">Partner Welcome</h1>
          <p className="mt-2 text-slate-600">
            You are not logged in. Please{" "}
            <Link to="/partner/login" className="text-blue-600 underline">
              log in
            </Link>
            .
          </p>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-[calc(100vh-0px)] bg-gradient-to-br from-[#f0f6ff] via-white to-[#eef2ff] flex flex-col">
      <div className="max-w-5xl mx-auto px-4 lg:px-8 py-10 w-full">
        {/* Top bar: greeting + actions */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-extrabold tracking-tight text-slate-900">
              Welcome{user?.contactName ? `, ${user.contactName}` : ""}!
            </h1>
            <p className="mt-1 text-slate-600">
              Thanks for partnering with <span className="font-semibold">ScholarsKnowledge</span>.
            </p>
          </div>

          {/* Action row — keep original buttons and ADD "Go to Dashboard" inline */}
          <div className="flex gap-2">
            <Link
              to="/partner/dashboard"
              className="rounded-full border border-blue-300 bg-blue-600 text-white px-4 py-2 text-sm font-semibold hover:bg-blue-700"
            >
              Go to Dashboard
            </Link>

            <button
              onClick={() => setEditOpen(true)}
              className="rounded-full border border-slate-300 bg-white px-4 py-2 text-sm font-semibold text-slate-700 hover:bg-slate-50"
            >
              Update Account Information
            </button>

            <button
              onClick={logout}
              className="rounded-full bg-slate-900 text-white px-4 py-2 text-sm font-semibold hover:bg-slate-800"
            >
              Log out
            </button>
          </div>
        </div>

        {msg && (
          <div className="mt-4 p-3 rounded-lg bg-green-50 border border-green-200 text-green-700">
            {msg}
          </div>
        )}

        {/* Partner summary card */}
        <section className="mt-6 grid gap-6 md:grid-cols-2">
          <div className="rounded-2xl border border-slate-200 bg-white/70 backdrop-blur p-6 shadow-sm">
            <h2 className="text-lg font-semibold text-slate-900">Your Organization</h2>
            <dl className="mt-4 space-y-2 text-sm text-slate-700">
              <div className="flex justify-between gap-4">
                <dt className="text-slate-500">Organization</dt>
                <dd className="font-medium">{user?.orgName || "—"}</dd>
              </div>
              <div className="flex justify-between gap-4">
                <dt className="text-slate-500">Contact</dt>
                <dd className="font-medium">{user?.contactName || "—"}</dd>
              </div>
              <div className="flex justify-between gap-4">
                <dt className="text-slate-500">Email</dt>
                <dd className="font-medium">{user?.email || "—"}</dd>
              </div>
              <div className="flex justify-between gap-4">
                <dt className="text-slate-500">Phone</dt>
                <dd className="font-medium">{user?.phone || "—"}</dd>
              </div>
              <div className="flex justify-between gap-4">
                <dt className="text-slate-500">Website</dt>
                <dd className="font-medium break-all">{user?.website || "—"}</dd>
              </div>
            </dl>
          </div>

          <div className="rounded-2xl border border-blue-200 bg-blue-50/70 p-6 shadow-sm">
            <h2 className="text-lg font-semibold text-blue-900">Partnership Standards</h2>
            <ul className="mt-3 list-disc pl-5 text-sm text-blue-900/90 space-y-2">
              <li>
                <span className="font-medium">No essays for students.</span>
              </li>
              <li>
                <span className="font-medium">No application fees.</span>
              </li>
              <li>
                <span className="font-medium">No collection of confidential personal information</span> (e.g., bank
                details, national IDs, social security numbers).
              </li>
            </ul>
            <p className="mt-3 text-sm text-blue-900/80">
              By submitting, you confirm that your scholarship adheres to these standards.
            </p>
          </div>
        </section>

        {/* Submit card */}
        <section className="mt-8">
          <Link
            to="/partner/submit-scholarship"
            className="block rounded-2xl border border-slate-200 bg-white hover:bg-slate-50 p-8 text-center shadow-sm transition"
          >
            <div className="text-xl font-semibold text-slate-900">Submit a Scholarship</div>
            <div className="text-sm text-slate-600 mt-1">
              Post an opportunity for students (no essays, no fees, no sensitive data).
            </div>
          </Link>
        </section>
      </div>

      {/* EDIT MODAL */}
      {editOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4">
          <div className="w-full max-w-xl rounded-2xl bg-white shadow-xl">
            <div className="flex items-center justify-between px-5 py-4 border-b border-slate-200">
              <h3 className="text-lg font-semibold text-slate-900">Update Account Information</h3>
              <button
                onClick={() => setEditOpen(false)}
                className="rounded-md px-3 py-1.5 text-sm text-slate-600 hover:bg-slate-100"
                aria-label="Close"
              >
                ✕
              </button>
            </div>

            <form onSubmit={saveUpdates} className="px-5 py-4">
              {/* Account fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <label className="block">
                  <div className="text-sm font-medium text-slate-700">Organization</div>
                  <input
                    name="orgName"
                    value={form.orgName}
                    onChange={onChange}
                    className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                  />
                </label>

                <label className="block">
                  <div className="text-sm font-medium text-slate-700">Contact Name</div>
                  <input
                    name="contactName"
                    value={form.contactName}
                    onChange={onChange}
                    className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                  />
                </label>

                <label className="block">
                  <div className="text-sm font-medium text-slate-700">Email</div>
                  <input
                    type="email"
                    name="email"
                    value={form.email}
                    onChange={onChange}
                    className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                  />
                </label>

                <label className="block">
                  <div className="text-sm font-medium text-slate-700">Phone</div>
                  <input
                    name="phone"
                    value={form.phone}
                    onChange={onChange}
                    className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                  />
                </label>

                <label className="block md:col-span-2">
                  <div className="text-sm font-medium text-slate-700">Website</div>
                  <input
                    name="website"
                    value={form.website}
                    onChange={onChange}
                    placeholder="https://example.edu"
                    className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                  />
                </label>
              </div>

              {/* Divider */}
              <hr className="my-5 border-slate-200" />

              {/* Password change (inside the same modal) */}
              <div>
                <h4 className="text-sm font-semibold text-slate-800">Change Password</h4>
                <p className="text-xs text-slate-500 mt-1">
                  {user?.password ? "Update your password below." : "Set a password for quicker login next time."}
                </p>

                {pwErr && (
                  <div className="mt-3 rounded border border-red-200 bg-red-50 p-2 text-red-700 text-sm">{pwErr}</div>
                )}

                <div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <label className="block">
                    <div className="text-sm font-medium text-slate-700">Current password</div>
                    <input
                      type="password"
                      value={currentPw}
                      onChange={(e) => setCurrentPw(e.target.value)}
                      placeholder={user?.password ? "Current password" : "Not set"}
                      disabled={!user?.password}
                      className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                    />
                  </label>

                  <label className="block">
                    <div className="text-sm font-medium text-slate-700">New password</div>
                    <input
                      type="password"
                      value={newPw}
                      onChange={(e) => setNewPw(e.target.value)}
                      placeholder="At least 6 characters"
                      className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                    />
                  </label>

                  <label className="block">
                    <div className="text-sm font-medium text-slate-700">Confirm new password</div>
                    <input
                      type="password"
                      value={confirmPw}
                      onChange={(e) => setConfirmPw(e.target.value)}
                      placeholder="Repeat new password"
                      className="mt-1 w-full border border-slate-300 rounded px-3 py-2 text-sm"
                    />
                  </label>
                </div>
              </div>

              <div className="flex items-center justify-end gap-2 mt-6">
                <button
                  type="button"
                  onClick={() => {
                    setEditOpen(false);
                    setPwErr("");
                  }}
                  className="rounded-md border border-slate-300 bg-white px-4 py-2 text-sm font-semibold text-slate-700 hover:bg-slate-50"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="rounded-md bg-blue-600 text-white px-4 py-2 text-sm font-semibold hover:bg-blue-700"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Footer */}
      <Footer />
    </div>
  );
}