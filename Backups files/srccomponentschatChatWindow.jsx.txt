// src/components/chat/ChatWindow.jsx
import { useEffect, useMemo, useRef, useState } from "react";
import {
  addDoc,
  collection,
  doc,
  onSnapshot,
  orderBy,
  query,
  serverTimestamp,
  setDoc,
} from "firebase/firestore";
import { db } from "../../lib/firebase";

/* Stable chat id for any 2 users */
function chatIdOf(a, b) {
  const A = String(a || "");
  const B = String(b || "");
  return [A, B].sort().join("__");
}

function cls(...xs) {
  return xs.filter(Boolean).join(" ");
}

function Bubble({ mine, msg, leftAvatar, rightAvatar }) {
  // Image bubble
  if (msg.type === "image" && msg.url) {
    return (
      <div className={cls("flex items-start gap-2", mine ? "justify-end" : "justify-start")}>
        {!mine && leftAvatar}
        <div className={cls("max-w-[80%]", mine ? "ml-auto" : "")}>
          <img
            src={msg.url}
            alt={msg.name || "image"}
            className={cls("max-h-72 rounded-lg cursor-pointer", mine ? "ml-auto" : "")}
            onClick={() => window.open(msg.url, "_blank")}
          />
          {msg.caption && (
            <div
              className={cls(
                "mt-1 px-3 py-2 rounded-2xl whitespace-pre-wrap break-words",
                mine ? "bg-blue-600 text-white" : "bg-slate-100 text-slate-900"
              )}
            >
              {msg.caption}
            </div>
          )}
        </div>
        {mine && rightAvatar}
      </div>
    );
  }

  // File bubble
  if (msg.type === "file" && msg.url) {
    return (
      <div className={cls("flex items-start gap-2", mine ? "justify-end" : "justify-start")}>
        {!mine && leftAvatar}
        <a
          href={msg.url}
          download={msg.name || "attachment"}
          className={cls(
            "inline-flex items-center gap-2 max-w-[80%] px-3 py-2 rounded-2xl underline",
            mine ? "ml-auto bg-blue-600 text-white" : "bg-slate-100 text-slate-900"
          )}
          title={msg.name || "Download"}
        >
          {/* paperclip icon */}
          <svg className="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M21 15V7.5a4.5 4.5 0 0 0-9 0V17a3 3 0 0 1-6 0V8" />
          </svg>
          <span className="truncate">{msg.name || "Attachment"}</span>
        </a>
        {mine && rightAvatar}
      </div>
    );
  }

  // Text bubble
  return (
    <div className={cls("flex items-start gap-2", mine ? "justify-end" : "justify-start")}>
      {!mine && leftAvatar}
      <div
        className={cls(
          "inline-block max-w-[80%] whitespace-pre-wrap break-words px-3 py-2 rounded-2xl",
          mine ? "ml-auto bg-blue-600 text-white" : "bg-slate-100 text-slate-900"
        )}
      >
        {msg.text || ""}
      </div>
      {mine && rightAvatar}
    </div>
  );
}

export default function ChatWindow({ me, peer, onClose }) {
  const chatId = useMemo(() => chatIdOf(me?.uid, peer?.uid), [me?.uid, peer?.uid]);
  const msgsRef = useMemo(() => collection(db, "chats", chatId, "messages"), [chatId]);

  const [msgs, setMsgs] = useState([]);
  const [text, setText] = useState("");
  const [expanded, setExpanded] = useState(true);

  const fileRef = useRef(null);
  const imgRef = useRef(null);
  const scroller = useRef(null);
  const textareaRef = useRef(null);

  const peerPhoto =
    peer?.photoURL || `https://ui-avatars.com/api/?name=${encodeURIComponent(peer?.name || "U")}`;
  const mePhoto =
    me?.photoURL || `https://ui-avatars.com/api/?name=${encodeURIComponent(me?.name || "Me")}`;

  const headerName = useMemo(() => {
    const t = (peer?.title || "").trim();
    const nm = (peer?.name || "").trim();
    return t ? `${t}. ${nm}` : nm;
  }, [peer?.title, peer?.name]);

  // subscribe to messages
  useEffect(() => {
    const qy = query(msgsRef, orderBy("createdAt", "asc"));
    const unsub = onSnapshot(qy, (snap) => {
      const list = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setMsgs(list);
      // autoscroll
      setTimeout(() => {
        if (scroller.current) scroller.current.scrollTop = scroller.current.scrollHeight;
      }, 30);
    });
    return () => unsub();
  }, [msgsRef]);

  // ensure the parent chat doc exists/updates
  async function touchChat(lastMessageObj) {
    const chatDoc = doc(db, "chats", chatId);
    await setDoc(
      chatDoc,
      {
        id: chatId,
        members: [String(me.uid), String(peer.uid)],
        updatedAt: serverTimestamp(),
        lastMessage: lastMessageObj || null,
      },
      { merge: true }
    );
  }

  async function sendText() {
    const t = (text || "").trim();
    if (!t) return;
    const last = { text: t, senderId: String(me.uid) };
    await addDoc(msgsRef, {
      type: "text",
      text: t,
      senderId: String(me.uid),
      createdAt: serverTimestamp(),
    });
    await touchChat(last);
    // clear and keep focus
    setText("");
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.focus();
    }
  }

  function pick(kind) {
    (kind === "image" ? imgRef : fileRef).current?.click();
  }

  async function handleFile(e, kind) {
    const file = e.target.files?.[0];
    e.target.value = ""; // allow re-pick same file
    if (!file) return;

    const dataUrl = await new Promise((res, rej) => {
      const fr = new FileReader();
      fr.onload = () => res(fr.result);
      fr.onerror = rej;
      fr.readAsDataURL(file);
    });

    const payload =
      kind === "image"
        ? { type: "image", url: dataUrl, name: file.name }
        : { type: "file", url: dataUrl, name: file.name };

    await addDoc(msgsRef, {
      ...payload,
      senderId: String(me.uid),
      createdAt: serverTimestamp(),
    });
    await touchChat({
      text: kind === "image" ? "[image]" : `[file] ${file.name}`,
      senderId: String(me.uid),
    });
  }

  // auto-grow textarea rows
  useEffect(() => {
    const ta = textareaRef.current;
    if (!ta) return;
    ta.style.height = "auto";
    ta.style.height = Math.min(ta.scrollHeight, 240) + "px"; // cap ~10-12 lines
  }, [text, expanded]);

  return (
    <div className="w-full rounded-2xl overflow-hidden border border-slate-200 bg-white shadow-xl">
      {/* header */}
      <div className="flex items-center justify-between px-3 py-2 border-b">
        <div className="flex items-center gap-2 min-w-0">
          <img
            src={peerPhoto}
            className="h-8 w-8 rounded-full object-cover"
            alt={peer?.name || "User"}
          />
          <div className="min-w-0">
            <div className="truncate font-semibold">{headerName}</div>
            {/* email intentionally hidden */}
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setExpanded((v) => !v)}
            className="rounded px-2 py-1 text-sm hover:bg-slate-100"
            title={expanded ? "Collapse composer" : "Expand composer"}
          >
            {expanded ? "Collapse" : "Expand"}
          </button>
          <button
            onClick={onClose}
            className="rounded px-2 py-1 text-sm text-slate-600 hover:bg-slate-100"
            title="Close"
          >
            Close
          </button>
        </div>
      </div>

      {/* thread */}
      <div ref={scroller} className="h-80 md:h-96 overflow-auto p-3 space-y-2 bg-white">
        {msgs.map((m) => {
          const mine = m.senderId === String(me.uid);
          const leftAvatar = (
            <img src={peerPhoto} className="h-7 w-7 rounded-full object-cover" alt={peer?.name || "User"} />
          );
          const rightAvatar = (
            <img src={mePhoto} className="h-7 w-7 rounded-full object-cover" alt={me?.name || "Me"} />
          );
          return (
            <div key={m.id}>
              <Bubble mine={mine} msg={m} leftAvatar={leftAvatar} rightAvatar={rightAvatar} />
            </div>
          );
        })}
        {msgs.length === 0 && (
          <div className="h-full grid place-items-center text-slate-500 text-sm">
            Say hello ðŸ‘‹
          </div>
        )}
      </div>

      {/* composer */}
      {expanded && (
        <div className="border-t p-2">
          <div className="flex items-center gap-2">
            {/* image */}
            <button
              onClick={() => pick("image")}
              className="p-2 rounded hover:bg-slate-100"
              title="Attach image"
            >
              {/* image icon */}
              <svg className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <circle cx="8.5" cy="8.5" r="1.5"></circle>
                <path d="M21 15l-5-5L5 21"></path>
              </svg>
            </button>
            {/* file (paperclip) */}
            <button
              onClick={() => pick("file")}
              className="p-2 rounded hover:bg-slate-100"
              title="Attach file"
            >
              <svg className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M21 15V7.5a4.5 4.5 0 0 0-9 0V17a3 3 0 0 1-6 0V8" />
              </svg>
            </button>

            <input
              ref={imgRef}
              type="file"
              accept="image/*"
              className="hidden"
              onChange={(e) => handleFile(e, "image")}
            />
            <input
              ref={fileRef}
              type="file"
              className="hidden"
              onChange={(e) => handleFile(e, "file")}
            />

            <textarea
              ref={textareaRef}
              value={text}
              onChange={(e) => setText(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  sendText();
                }
              }}
              placeholder="Write a messageâ€¦"
              className="flex-1 rounded-xl border border-slate-200 px-3 py-2 outline-none min-h-[44px] max-h-60 resize-none"
            />
            <button
              onClick={sendText}
              disabled={!text.trim()}
              className="rounded-md bg-blue-600 px-4 py-2 text-white font-medium hover:bg-blue-700 disabled:opacity-50"
              title="Send"
            >
              Send
            </button>
          </div>
        </div>
      )}
    </div>
  );
}